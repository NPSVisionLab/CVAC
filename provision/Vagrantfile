# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = '2'
Vagrant.require_version '>= 1.5.0'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "ubuntu/trusty64"
  # config.vm.box = "bento/centos-6.7"

  # synchronize VM time with an NTP server, but ignore failure
  config.vm.provision "shell", run: "always", inline: <<-SHELL
    sudo sh -c 'ntpdate ntp.ubuntu.com pool.ntp.org stargate.nps.edu ; true'
  SHELL
  
  # EasyCV prerequisites for both client and server
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install -y cmake build-essential git
    apt-get install -y libarchive-dev zeroc-ice35
  SHELL

  config.vm.define "client" do |client|
    client.vm.hostname = 'easycv-client'

    # forward the iPython Notebook port,
    # access it on the host at http://127.0.0.1:8001
    client.vm.network :forwarded_port, guest: 8888, host: 9001, auto_correct: true
    client.vm.network "private_network", ip: "192.168.9.3"
    # export PYTHONPATH=/home/vagrant/EasyCV/build_client/installed/EasyCV/python/easyPkg

    # iPython installation:
    # update the package manager and install python packages
    config.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y ipython-notebook python-dev python-numpy
      apt-get install -y python-matplotlib python-scipy
    SHELL

    # EasyCV git clone, build and install
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
      if [ ! -d "/home/vagrant/easycv" ]; then
        git clone --branch feature-clientbuild git://github.com/NPSVisionLab/CVAC.git /home/vagrant/easycv
      fi
      cd /home/vagrant/easycv
      mkdir -p build_client && cd build_client
      cmake -DBUILD_WITH_BOW=OFF -DBUILD_WITH_OPENCVPERFORMANCE=OFF .. >> out_cmake.txt 2>&1
      make >> out_make.txt 2>&1
      make install >> out_install.txt 2>&1
    SHELL
    
    # Run the ipython notebook
    config.vm.provision "shell", privileged: false, run: "always", inline: <<-SHELL
      mkdir -p /home/vagrant/easycv/demo
      export PYTHONPATH=/home/vagrant/easycv/3rdparty/libsvm:/home/vagrant/easycv/build_client/installed/EasyCV/python/easyPkg:/home/vagrant/easycv/build_client/installed/EasyCV/python/icePkg
      ipython notebook --notebook-dir=/home/vagrant/easycv/demo --no-browser --ip=0.0.0.0 &
    SHELL
  end

  config.vm.define "server" do |server|
    server.vm.hostname = 'easycv-server'
    server.vm.network "private_network", ip: "192.168.9.4"

    # The OpenCV build requires at least 1GB of memory, and
    # some algorithms are happier with more.
    config.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus = 2
    end

    # EasyCV service-specific prerequisites
    config.vm.provision "shell", inline: <<-SHELL
      apt-get install -y unzip
      apt-get install -y libarchive-dev zeroc-ice35
      apt-get install -y libavcodec-dev libavformat-dev libswscale-dev
      apt-get install -y python-dev python-numpy
    SHELL

    # OpenCV:
    # If the folder /home/vagrant/opencv-2.4.9 doesn't exist, unpack the
    # OpenCV archive. If the zip file is not in place in the shared folder,
    # wget it from here: https://github.com/Itseez/opencv/archive/3.0.0.zip
    # Alternatively, we could git clone https://github.com/Itseez/opencv.git
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
      if [ ! -d "/home/vagrant/opencv-2.4.9" ]; then
        if [ ! -f "/home/vagrant/opencv-2.4.9/opencv-2.4.9.zip" ]; then
          wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.9/opencv-2.4.9.zip
        fi
        unzip opencv-2.4.9.zip
      fi
    SHELL
  
    # build opencv-2.4.9;
    # if opencv-2.4.9/build exists, assume it has been built
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
    if [ ! -d "/home/vagrant/opencv-2.4.9/build" ]; then
      mkdir -p opencv-2.4.9/build && cd opencv-2.4.9/build
      cmake -D CMAKE_INSTALL_PREFIX=/home/vagrant/opencv-2.4.9/build/installed ..

      NUMPROCS=`cat /proc/cpuinfo | grep processor | wc -l`
      make -j${NUMPROCS}
    fi
    SHELL

    # install OpenCV;
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
    if [ ! -d "/home/vagrant/opencv-2.4.9/build/installed" ]; then
      cd opencv-2.4.9/build
      make install
      cd .. # opencv-2.4.9
    fi
    SHELL

    # EasyCV git clone, build and install
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
      if [ ! -d "/home/vagrant/easycv" ]; then
        git clone --branch feature-clientbuild git://github.com/NPSVisionLab/CVAC.git /home/vagrant/easycv
      fi
      cd /home/vagrant/easycv
      mkdir -p build_server && cd build_server
      cmake -D OpenCV_DIR=/home/vagrant/opencv-2.4.9/build/installed/share/OpenCV -D CMAKE_INSTALL_PREFIX=/home/vagrant/easycv/build_server/installed .. >> out_cmake.txt 2>&1
      make >> out_make.txt 2>&1
      make install >> out_install.txt 2>&1
    SHELL

    # EasyCV service start
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
      cd /home/vagrant/easycv/build_server
      /home/vagrant/easycv/build_server/installed/EasyCV/bin/startServices.sh >> out_startServices.txt 2>&1
    SHELL
    
  end
end
