/*M///////////////////////////////////////////////////////////////////////////////////////
//
//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
//
//  By downloading, copying, installing or using the software you agree to this license.
//  If you do not agree to this license, do not download, install,
//  copy or use the software.
//
//
//                        Intel License Agreement
//                For Open Source Computer Vision Library
//
// Copyright (C) 2000, Intel Corporation, all rights reserved.
// Third party copyrights are property of their respective owners.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//   * Redistribution's of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//   * Redistribution's in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//   * The name of Intel Corporation may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
// This software is provided by the copyright holders and contributors "as is" and
// any express or implied warranties, including, but not limited to, the implied
// warranties of merchantability and fitness for a particular purpose are disclaimed.
// In no event shall the Intel Corporation or contributors be liable for any direct,
// indirect, incidental, special, exemplary, or consequential damages
// (including, but not limited to, procurement of substitute goods or services;
// loss of use, data, or profits; or business interruption) however caused
// and on any theory of liability, whether in contract, strict liability,
// or tort (including negligence or otherwise) arising in any way out of
// the use of this software, even if advised of the possibility of such damage.
//
//M*/

/*
 * performance.cpp
 *
 * Measure performance of classifier
 */
#include <Ice/Ice.h>
#include <IceBox/IceBox.h>
#include <IceUtil/UUID.h>
#include <DetectorI.h>
#include <CVACUtil/processRunSet.h>
#include "opencv2/opencv.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <cstdio>
#include <cmath>
#include <ctime>

#include <stdio.h>
#include <iostream>


#ifdef _WIN32
/* use clock() function insted of time() */
#define time( arg ) (((double) clock()) / CLOCKS_PER_SEC)
#endif /* _WIN32 */

using namespace Ice;
using namespace cvac;

#ifndef PATH_MAX
#define PATH_MAX 512
#endif /* PATH_MAX */

typedef struct HidCascade
{
    int size;
    int count;
} HidCascade;

typedef struct ObjectPos
{
    float x;
    float y;
    float width;
    int found;    /* for reference */
    int neighbors;
} ObjectPos;

//===========================================================================

static const char *configFile = "config.server";

//===========================================================================

// For Use with IceBox service
class CVAC_OpenCV_Detector : public ::IceBox::Service
{
private:
    Ice::ObjectAdapterPtr _adapter;
public:
    CVAC_OpenCV_Detector()
    {

    }
    virtual ~CVAC_OpenCV_Detector()
    {
    }
    virtual void start(const std::string& name,
        const Ice::CommunicatorPtr &communicator,
        const Ice::StringSeq &args)
    {
        _adapter = 
           communicator->createObjectAdapter(name);
    
        DetectorI* detect = new DetectorI("opencv_ak-47", 
                                  "OpenCV HAAR detector for AK-47",
                                   "LeftHalfCascade01_000_14.xml");
        _adapter->add(detect, 
                     communicator->stringToIdentity("cVAC_OpenCV_Detector"));
        
	     _adapter->activate();
    }

    virtual void stop()
    {
        _adapter->destroy();
    }
};
// factory function for IceBox server
extern "C"
{
    ICE_DECLSPEC_EXPORT IceBox::Service* create(Ice::CommunicatorPtr communicator)
    {
        return new CVAC_OpenCV_Detector();
    }
}
//===========================================================================



class OpenCVPerformanceServer : public Ice::Application
{
public:
    virtual int run(int, char*[]);
};

int main( int argc, char* argv[] )
{
     OpenCVPerformanceServer app;
     return app.main(argc, argv, configFile);
}

int OpenCVPerformanceServer::run( int argc, char* [] )
{
    if(argc > 1)
    {
        std::cerr << appName() << ": too many arguments" << std::endl;
        return EXIT_FAILURE;
    }
    
    Ice::ObjectAdapterPtr adapter = 
           communicator()->createObjectAdapter("CVAC_OpenCV_Detector.Server");
   
    
  /*Ice::Identity alID = communicator()->stringToIdentity(IceUtil::generateUUID());
    CVAlgorithmPrx alProx = CVAlgorithmPrx::uncheckedCast(adapter->createProxy(alID));
    adapter->add(algor, alID);*/
   
    DetectorI* detect = new DetectorI("opencv_ak-47", 
                              "OpenCV HAAR detector for AK-47",
                               "LeftHalfCascade01_000_14.xml");
    adapter->add(detect, 
                 communicator()->stringToIdentity("cVAC_OpenCV_Detector"));
    
    adapter->activate();
   
    communicator()->waitForShutdown();
    return EXIT_SUCCESS;
}
//===========================================================================
CVAlgorithmServiceI::CVAlgorithmServiceI(std::string name, std::string desc)
{
    _name = name;
    _description = desc;
    _is_initialized = false;
    _verbosity = 0;
}
void CVAlgorithmServiceI::initialize(int verbosity, const Ice::Current &)
{
   _verbosity = verbosity;
    _is_initialized = true;
}

bool CVAlgorithmServiceI::isInitialized(const Ice::Current &)
{
    return _is_initialized;
}

void CVAlgorithmServiceI::destroy(const Ice::Current &)
{
    _is_initialized = false;
}
std::string CVAlgorithmServiceI::getName( const Ice::Current &)
{
    return _name;
}
std::string CVAlgorithmServiceI::getDescription(const Ice::Current &)
{
    return _description;
}
void CVAlgorithmServiceI::setVerbosity(int verbosity, const Ice::Current &)
{
    _verbosity = verbosity;
}
//DetectorPrx CVAlgorithmServiceI::createDetector(
//                             const DetectorDataPrx &detData,
//                             const Ice::Current &)
//{
//    return NULL;
//}
//===========================================================================
ResultSet detectFile(DetectorPtr detector, const char *fname)
{
    ResultSet res;
    IplImage* img;
    double scale_factor = 1.2;
    int i; 
    DetectorI *detectI = dynamic_cast<DetectorI*>(detector.get());

    img = cvLoadImage( fname );
    if( !img )
    {
        return res;
    }
    CvMemStorage *storage = detectI->getStorage();
    CvHaarClassifierCascade *cascade = detectI->getCascade();
    cvClearMemStorage(storage);
    CvSeq *objects;
    objects = cvHaarDetectObjects(img, cascade, storage, scale_factor, 1 );
    cascade->count = detectI->getNOS();

    int detcount = ( objects ? objects->total : 0);
    
    res.filename = std::string(fname);
    ResultRect rect;
	std::vector<ResultRect> *detections = 
                         new std::vector<ResultRect>(detcount);
    for( i = 0; i < detcount; i++ )
    {
        CvAvgComp r = *((CvAvgComp*) cvGetSeqElem( objects, i ));
        rect.x = r.rect.x;
        rect.y = r.rect.y;
        rect.width = r.rect.width;
        rect.height = r.rect.height;
        rect.confidence = 0;
        detections->push_back(rect);
    }
   
    res.filename = std::string(fname);
    res.detections = *detections;
    
    cvReleaseImage( &img );

    return res;
}
//===========================================================================
DetectorI::DetectorI(std::string name, std::string desc, 
                           std::string cascade) : 
                           CVAlgorithmServiceI(name, desc)
{
    _cascadeString = cascade;
}

void DetectorI::initialize(int verbosity,
                           const ::cvac::DetectorData& data,
                           const Ice::Current &current)
{
    CVAlgorithmServiceI::initialize(verbosity, current);
    _storage = cvCreateMemStorage();

    if (_cascadeString.size() > 0)
    {
        _cascade = cvLoadHaarClassifierCascade( 
                   _cascadeString.c_str(), cvSize( DetectorI::SCAN_WIDTH, 
                                          DetectorI::SCAN_HEIGHT ) );
        if (NULL != _cascade)
        {
            _nos = _cascade->count;
            _is_initialized = true;
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
cvac::DetectorData DetectorI::createCopyOfDetectorData(const ::Ice::Current& current)
{
   return cvac::DetectorData();
}

DetectorI::~DetectorI() 
{
}


void DetectorI::destroy(const Ice::Current &current)
{
    CVAlgorithmServiceI::destroy(current);
    if (NULL != _storage)
        cvReleaseMemStorage( &_storage );
    if (NULL != _cascade)
        cvReleaseHaarClassifierCascade( &_cascade );
}


void DetectorI::process(const DetectorCallbackHandlerPrx &client, 
                                  const RunSet &run,
                                  const Ice::Current &)
{
    _callback = client;
    DoDetectFunc func = detectFile;
    processRunSet(this, client, func, run);
}

DetectorPropertiesPrx DetectorI::getDetectorProperties(const Ice::Current &)
{
    return NULL;   
}




