#include "cvPerf_ICETrainI.h"
#include "file_open_options.h"
#include <iostream>
#include <vector>

#include <Ice/Communicator.h>
#include <Ice/Initialize.h>
#include <Ice/ObjectAdapter.h>
#include <CVACUtil/processRunSet.h>
#include <CVACUtil/FileUtils.h>

// Use these filenames as internal trainer-knowledge
const char* INFO_FILE_NAME = "cvPerf_Trainer_Runset.dat";
const char* VEC_FILE_NAME = "cvPerf_Trainer_Samples.vec";
const char* NEG_FILE_NAME = "cvPerf_BackgroundImgs.txt";
const char* CV_PERFORMANCE_DIR = "trainResult";

cvPerf_ICETrainI::cvPerf_ICETrainI()
{
  initFlag = false;
}

cvPerf_ICETrainI::~cvPerf_ICETrainI()
{
}

void cvPerf_ICETrainI::initialize(::Ice::Int verbosity,const ::Ice::Current& current)
{
  printf("CVAC_OpenCV_Trainer Service initialized. \n");
  cvPerfTrainer = new CvPerfTrainer();
  initFlag = true;
}

bool cvPerf_ICETrainI::isInitialized(const ::Ice::Current& current)
{
	return initFlag;
}

void cvPerf_ICETrainI::destroy(const ::Ice::Current& current)
{
  if(NULL != cvPerfTrainer) {
    delete(cvPerfTrainer);
    cvPerfTrainer = NULL;
  }
	initFlag = false;
}

std::string cvPerf_ICETrainI::getName(const ::Ice::Current& current)
{
	return "CVAC_OpenCV_Trainer Service";
}
std::string cvPerf_ICETrainI::getDescription(const ::Ice::Current& current)
{
	return "CVAC_OpenCV_Trainer Service - Empty Description";
}

void cvPerf_ICETrainI::setVerbosity(::Ice::Int verbosity, const ::Ice::Current& current)
{
  // ToDo: add ICE-verbosity
}

// First convert samples from runset, then use OpenCV library call instead of command line
void cvPerf_ICETrainI::process(const ::cvac::TrainerCallbackHandlerPrx& callbackHandler, const ::cvac::RunSet& runset, const ::Ice::Current& current)
{
  ::cvac::RunSet tempRunSet = runset;
  ::cvac::DetectorData ddata;
  const int TRAINING_SEARCH_W = 20, TRAINING_SEARCH_H = 20,
            NUM_TRAIN_STAGES = 14;
  callbackHandler->message(0, std::string("Begin OpenCv Haar training \n"));
  std::string tempDir = cvac::fixupRunSet(tempRunSet);
  Pos_neg_counts numImgsFound = cvPerfTrainer->createOpenCvSamples_datafiles(tempRunSet, callbackHandler, std::string(INFO_FILE_NAME), 
                                                                 std::string(VEC_FILE_NAME), std::string(NEG_FILE_NAME));
  // clean-up all intermediate trainer output directories from previous runs
  std::string cleanUpTrainerPath("trainResult");
  deleteDirectory(cleanUpTrainerPath);
  // Prepare OpenCV samples
  int numPreparedSamples = numImgsFound.numPosImgs;
  cvPerfTrainer->prepareTrainingSamples(INFO_FILE_NAME, VEC_FILE_NAME,  // Phase 1 of 'violaJones.properties': opencv_createsamples
                                        numPreparedSamples, 
                                        TRAINING_SEARCH_W, TRAINING_SEARCH_H);

  // Run training
  cvPerfTrainer->trainDataset(callbackHandler, CV_PERFORMANCE_DIR,
                              VEC_FILE_NAME, NEG_FILE_NAME,
                              TRAINING_SEARCH_W, TRAINING_SEARCH_H,  // Same search window as prepare-samples
                              numImgsFound.numPosImgs, numImgsFound.numNegImgs,
                              NUM_TRAIN_STAGES);
  callbackHandler->message(0, std::string("Done training.  Xml result stored to: 'trainResult.xml' \n"));


  // XML file is written in library call 'cvCreateTreeCascadeClassifier' to be one level up from '/trainResult'
  ::FILE *xml = fopen("trainResult.xml", trainOpenStr);
  if(!xml)
	{
    callbackHandler->message(0, std::string("Error, Unable to open file: 'trainResult.xml' after training.\n"));
		return;
	}

  callbackHandler->message(0, std::string("Writing back detector XML filename over Ice communicator using 'createdDetector(' \n"));
  ddata.type = cvac::FILE;  // Full path makes it into Java String 'm_ddata.file.filename' for Detector XML in 'IceTrainer.java'
  std::string res = std::string(getCurrentWorkingDirectory().c_str());
  res.append("/trainResult.xml");
  ddata.file.filename = res;
  callbackHandler->createdDetector(ddata);
  cvac::deleteDirectory(tempDir);

  
}

::cvac::TrainerPropertiesPrx cvPerf_ICETrainI::getTrainerProperties(
                             const ::Ice::Current& current)
{
  return NULL;
}

const char* cvPerf_ICETrainI::getInfoFilename()     
{ 
  return(INFO_FILE_NAME); 
}
    
const char* cvPerf_ICETrainI::getVecFilename()      
{ 
  return(VEC_FILE_NAME);  
}

const char* cvPerf_ICETrainI::getNeg_bg_Filename()
{
  return(NEG_FILE_NAME);  
}

