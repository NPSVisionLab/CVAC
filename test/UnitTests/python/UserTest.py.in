from __future__ import print_function
# test the Python Tutorials
# paths sets up the PYTHONPATH so this is not needed to be setup by the user
# to run just this test, use "ctest -R PythonFileServerTest --verbose"
import sys
import unittest
import os

isWire = "${BUILD_WITH_WIREDIAGRAM}"
isScreenShot = "${BUILD_WITH_SCREENSHOT}"
isMatBridge = "${BUILD_WITH_MATLABBRIDGE}"
isShotBoundary = "${BUILD_WITH_SBD}"

class UserTest(unittest.TestCase):

    ic = None
    fs = None
    dataDir = None
    
    #
    # Test the initialization of Ice and the service proxy
    #
    def setUp(self):

        # Note: We don't have to set any env variables here as
        # that is done is the Cmake files that add the tests.

        # Just change directory to the root dir to run the tests
        self.filepath = os.path.dirname(os.path.abspath(__file__))
        # Here we assume a directory structure of for this test file as:
        # rootDir/test/UnitTests/python/UserTest.py
        self.rootDir = self.filepath + '/../../..'
        os.chdir(self.rootDir)
        # Here we assume the demo directory off the rootdir
        self.demoDir = self.filepath + "/../../../demo"
        # Verify that the demo directory exists
        if not os.path.exists( self.demoDir ):
            print("Present working directory: " + os.getcwd())
            print("Looking for CVAC.DemoDir at: " + self.demoDir)
            raise RuntimeError("Cannot obtain path to CVAC.DemoDir, see comments")

    #
    # We don't need to run this test!  It tests the clients ability
    # to load opencv but the client never has to do this!
    # Run opencv_tests.py
    #
    def test_opencv_tests(self):
        print("running opencv_tests.py")
        sys.stdout.flush()
        execfile(self.demoDir + "/opencv_tests.py");

    #
    # Run wirediagram demo
    #
    def test_detect_wirediagram(self):
        if isWire == "ON":
            print("running detect_wirediagram.py")
            sys.stdout.flush()
            execfile(self.demoDir + "/detect_wirediagram.py");

    #
    # Run screenshot demo
    #
    def test_detect_screenshot(self):
        if isScreenShot == "ON":
            print("running detect_screenshot.py")
            sys.stdout.flush()
            execfile(self.demoDir + "/detect_screenshot.py");

    #
    # Run shot boundary detection demo
    #
    def test_detect_sbd(self):
        if isShotBoundary == "ON":
            print("running detect_sbd.py")
            sys.stdout.flush()
            execfile(self.demoDir + "/detect_sbd.py");

    #
    # Run ship detection demo
    #
    def test_detect_ship(self):
        print("running detect_ship.py")
        sys.stdout.flush()
        sys.argv = ['--default-images']
        execfile(self.demoDir + "/detect_ship.py");

    def tearDown(self):
        # Clean up
        pass

if __name__ == '__main__':
    unittest.main()
