#
# CMake script for unit tests that are written in Python
# 

cmake_minimum_required(VERSION 2.6)

find_program(PYTHON_EXECUTABLE "python")

IF( NOT PYTHON_EXECUTABLE )
  MESSAGE( FATAL_ERROR "Python executable not found: cannot run Python UnitTests" )
ENDIF( NOT PYTHON_EXECUTABLE )

IF( NOT ICE_PYTHON_DIR )
  MESSAGE( FATAL_ERROR "ICE Python bindings not found: cannot run Python UnitTests" )
ENDIF()

set(SETUP_PY_IN "${CMAKE_CURRENT_SOURCE_DIR}/setup.py.in")
set(SETUP_PY    "${CMAKE_CURRENT_BINARY_DIR}/setup.py")
set(OUTPUT      "${CMAKE_CURRENT_BINARY_DIR}/build/timestamp")


add_custom_target(PythonUnitTests ALL DEPENDS ${SLICE_FILES})
IF (WIN32)
    GET_FILENAME_COMPONENT(ICE_SLICE_PPATH "${ICE_SLICE_EXECUTABLE}" PATH)
    FILE( TO_NATIVE_PATH ${ICE_PYTHON_DIR} ICE_PYTHON_NATIVE )
    FILE( TO_NATIVE_PATH ${SLICE_OUTPUT_PYTHONDIR} SLICE_OUTPUT_PYTHONDIR_NATIVE )
    GET_FILENAME_COMPONENT(OPENCV_PPATH "${OPENCV_PY_PY}" PATH)
    GET_FILENAME_COMPONENT(OPENCV_CV2PATH "${OPENCV_PY_LIB}" PATH)
    FILE( TO_NATIVE_PATH ${ICE_ROOT}/bin ICE_BIN_NATIVE )
    SET (MY_PYTHONPATH "${ICE_PYTHON_NATIVE}\;${SLICE_OUTPUT_PYTHONDIR_NATIVE}\;${OPENCV_PPATH}\;${OPENCV_CV2PATH}\;${CMAKE_BINARY_DIR}/etc/python/easyPkg/easy" )
    SET (MY_PATH "${ICE_SLICE_PPATH}\;${ICE_BIN_NATIVE}\;${ICE_PYTHON_NATIVE}\;${OpenCV_LIB_DIR_OPT}/../bin\;${OPENCV_CV2PATH}\;${PATH}" )
    SET (MYDYLD_PATH  "")
    message ("pp = ${MY_PYTHONPATH}, p = ${MY_PATH}")

ELSE (WIN32)
    GET_FILENAME_COMPONENT(OPENCV_PPATH "${OPENCV_PY_PY}" PATH)
    SET (MY_PYTHONPATH "${ICE_PYTHON_DIR}:${SLICE_OUTPUT_PYTHONDIR}:${OPENCV_PPATH}:${CMAKE_BINARY_DIR}/etc/python/easyPkg" )
    SET (MY_PATH "${PATH}" )
    IF (APPLE)
        SET (MYDYLD_PATH "${OpenCV_LIB_DIR_OPT}:${DYLD_LIBRARY_PATH}")
        SET (MYDYLD_PY_PATH "${CMAKE_SOURCE_DIR}/3rdparty/opencv/lib:${DYLD_LIBRARY_PATH}")
    ELSE (APPLE)
        SET (MYDYLD_PATH  "")
    ENDIF (APPLE)
ENDIF (WIN32)

# Uncomment this out for test coverage info

# Test whether a Python client can connect and talk to the Corpus service
# Note: this currently needs the Java Corpus server started manually
# Note: quite likely we'll need this on Windows, and ; instead of :
#       FILE( TO_NATIVE_PATH ${ICE_ROOT}/python ICE_PYTHON_DIR_NATIVE )
ADD_TEST( PythonCorpusTest
  ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/CorpusServerTest.py)
SET_TESTS_PROPERTIES( PythonCorpusTest
  PROPERTIES ENVIRONMENT "PYTHONPATH=${MY_PYTHONPATH};PATH=${MY_PATH}"
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")

ADD_TEST( PythonFileServerTest
  ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/FileServerTest.py)
SET_TESTS_PROPERTIES( PythonFileServerTest
  PROPERTIES ENVIRONMENT "PYTHONPATH=${MY_PYTHONPATH};PATH=${MY_PATH};DYLD_LIBRARY_PATH=${MYDYLD_PATH}"
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")

ADD_TEST( MiniTutorialTest
  ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/MiniTutorialTest.py
)
SET_TESTS_PROPERTIES( MiniTutorialTest
  PROPERTIES ENVIRONMENT "PYTHONPATH=${MY_PYTHONPATH};PATH=${MY_PATH};DYLD_LIBRARY_PATH=${MYDYLD_PATH}"
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")

ADD_TEST( EasyTest
  ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/EasyTest.py
)
SET_TESTS_PROPERTIES( EasyTest
  PROPERTIES ENVIRONMENT "PYTHONPATH=${MY_PYTHONPATH};PATH=${MY_PATH};DYLD_LIBRARY_PATH=${MYDYLD_PATH}"
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")

IF( BUILD_WITH_RSI )
  ADD_TEST( RunsetIteratorTest
    ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/RunsetIteratorTest.py)
  SET_TESTS_PROPERTIES( RunsetIteratorTest
    PROPERTIES ENVIRONMENT "PYTHONPATH=${MY_PYTHONPATH};PATH=${MY_PATH};DYLD_LIBRARY_PATH=${MYDYLD_PATH}"
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")
ENDIF()

INCLUDE (UserCMakeLists.txt OPTIONAL)
